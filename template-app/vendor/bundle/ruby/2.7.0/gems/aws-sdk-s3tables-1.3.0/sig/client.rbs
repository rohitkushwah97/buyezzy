# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module S3Tables
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?account_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_checksum_calculation: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?response_checksum_validation: String,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?sigv4a_signing_region_set: Array[String],
                      ?stub_responses: untyped,
                      ?telemetry_provider: Aws::Telemetry::TelemetryProviderBase,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _CreateNamespaceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateNamespaceResponse]
        def table_bucket_arn: () -> ::String
        def namespace: () -> ::Array[::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#create_namespace-instance_method
      def create_namespace: (
                              table_bucket_arn: ::String,
                              namespace: Array[::String]
                            ) -> _CreateNamespaceResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateNamespaceResponseSuccess

      interface _CreateTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTableResponse]
        def table_arn: () -> ::String
        def version_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#create_table-instance_method
      def create_table: (
                          table_bucket_arn: ::String,
                          namespace: ::String,
                          name: ::String,
                          format: ("ICEBERG"),
                          ?metadata: {
                            iceberg: {
                              schema: {
                                fields: Array[
                                  {
                                    name: ::String,
                                    type: ::String,
                                    required: bool?
                                  },
                                ]
                              }
                            }?
                          }
                        ) -> _CreateTableResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTableResponseSuccess

      interface _CreateTableBucketResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateTableBucketResponse]
        def arn: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#create_table_bucket-instance_method
      def create_table_bucket: (
                                 name: ::String
                               ) -> _CreateTableBucketResponseSuccess
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateTableBucketResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#delete_namespace-instance_method
      def delete_namespace: (
                              table_bucket_arn: ::String,
                              namespace: ::String
                            ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#delete_table-instance_method
      def delete_table: (
                          table_bucket_arn: ::String,
                          namespace: ::String,
                          name: ::String,
                          ?version_token: ::String
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#delete_table_bucket-instance_method
      def delete_table_bucket: (
                                 table_bucket_arn: ::String
                               ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#delete_table_bucket_policy-instance_method
      def delete_table_bucket_policy: (
                                        table_bucket_arn: ::String
                                      ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#delete_table_policy-instance_method
      def delete_table_policy: (
                                 table_bucket_arn: ::String,
                                 namespace: ::String,
                                 name: ::String
                               ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _GetNamespaceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetNamespaceResponse]
        def namespace: () -> ::Array[::String]
        def created_at: () -> ::Time
        def created_by: () -> ::String
        def owner_account_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#get_namespace-instance_method
      def get_namespace: (
                           table_bucket_arn: ::String,
                           namespace: ::String
                         ) -> _GetNamespaceResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetNamespaceResponseSuccess

      interface _GetTableResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTableResponse]
        def name: () -> ::String
        def type: () -> ("customer" | "aws")
        def table_arn: () -> ::String
        def namespace: () -> ::Array[::String]
        def version_token: () -> ::String
        def metadata_location: () -> ::String
        def warehouse_location: () -> ::String
        def created_at: () -> ::Time
        def created_by: () -> ::String
        def managed_by_service: () -> ::String
        def modified_at: () -> ::Time
        def modified_by: () -> ::String
        def owner_account_id: () -> ::String
        def format: () -> ("ICEBERG")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#get_table-instance_method
      def get_table: (
                       table_bucket_arn: ::String,
                       namespace: ::String,
                       name: ::String
                     ) -> _GetTableResponseSuccess
                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTableResponseSuccess

      interface _GetTableBucketResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTableBucketResponse]
        def arn: () -> ::String
        def name: () -> ::String
        def owner_account_id: () -> ::String
        def created_at: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#get_table_bucket-instance_method
      def get_table_bucket: (
                              table_bucket_arn: ::String
                            ) -> _GetTableBucketResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTableBucketResponseSuccess

      interface _GetTableBucketMaintenanceConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTableBucketMaintenanceConfigurationResponse]
        def table_bucket_arn: () -> ::String
        def configuration: () -> ::Hash[("icebergUnreferencedFileRemoval"), Types::TableBucketMaintenanceConfigurationValue]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#get_table_bucket_maintenance_configuration-instance_method
      def get_table_bucket_maintenance_configuration: (
                                                        table_bucket_arn: ::String
                                                      ) -> _GetTableBucketMaintenanceConfigurationResponseSuccess
                                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTableBucketMaintenanceConfigurationResponseSuccess

      interface _GetTableBucketPolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTableBucketPolicyResponse]
        def resource_policy: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#get_table_bucket_policy-instance_method
      def get_table_bucket_policy: (
                                     table_bucket_arn: ::String
                                   ) -> _GetTableBucketPolicyResponseSuccess
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTableBucketPolicyResponseSuccess

      interface _GetTableMaintenanceConfigurationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTableMaintenanceConfigurationResponse]
        def table_arn: () -> ::String
        def configuration: () -> ::Hash[("icebergCompaction" | "icebergSnapshotManagement"), Types::TableMaintenanceConfigurationValue]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#get_table_maintenance_configuration-instance_method
      def get_table_maintenance_configuration: (
                                                 table_bucket_arn: ::String,
                                                 namespace: ::String,
                                                 name: ::String
                                               ) -> _GetTableMaintenanceConfigurationResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTableMaintenanceConfigurationResponseSuccess

      interface _GetTableMaintenanceJobStatusResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTableMaintenanceJobStatusResponse]
        def table_arn: () -> ::String
        def status: () -> ::Hash[("icebergCompaction" | "icebergSnapshotManagement" | "icebergUnreferencedFileRemoval"), Types::TableMaintenanceJobStatusValue]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#get_table_maintenance_job_status-instance_method
      def get_table_maintenance_job_status: (
                                              table_bucket_arn: ::String,
                                              namespace: ::String,
                                              name: ::String
                                            ) -> _GetTableMaintenanceJobStatusResponseSuccess
                                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTableMaintenanceJobStatusResponseSuccess

      interface _GetTableMetadataLocationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTableMetadataLocationResponse]
        def version_token: () -> ::String
        def metadata_location: () -> ::String
        def warehouse_location: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#get_table_metadata_location-instance_method
      def get_table_metadata_location: (
                                         table_bucket_arn: ::String,
                                         namespace: ::String,
                                         name: ::String
                                       ) -> _GetTableMetadataLocationResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTableMetadataLocationResponseSuccess

      interface _GetTablePolicyResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetTablePolicyResponse]
        def resource_policy: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#get_table_policy-instance_method
      def get_table_policy: (
                              table_bucket_arn: ::String,
                              namespace: ::String,
                              name: ::String
                            ) -> _GetTablePolicyResponseSuccess
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetTablePolicyResponseSuccess

      interface _ListNamespacesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListNamespacesResponse]
        def namespaces: () -> ::Array[Types::NamespaceSummary]
        def continuation_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#list_namespaces-instance_method
      def list_namespaces: (
                             table_bucket_arn: ::String,
                             ?prefix: ::String,
                             ?continuation_token: ::String,
                             ?max_namespaces: ::Integer
                           ) -> _ListNamespacesResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListNamespacesResponseSuccess

      interface _ListTableBucketsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTableBucketsResponse]
        def table_buckets: () -> ::Array[Types::TableBucketSummary]
        def continuation_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#list_table_buckets-instance_method
      def list_table_buckets: (
                                ?prefix: ::String,
                                ?continuation_token: ::String,
                                ?max_buckets: ::Integer
                              ) -> _ListTableBucketsResponseSuccess
                            | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTableBucketsResponseSuccess

      interface _ListTablesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTablesResponse]
        def tables: () -> ::Array[Types::TableSummary]
        def continuation_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#list_tables-instance_method
      def list_tables: (
                         table_bucket_arn: ::String,
                         ?namespace: ::String,
                         ?prefix: ::String,
                         ?continuation_token: ::String,
                         ?max_tables: ::Integer
                       ) -> _ListTablesResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTablesResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#put_table_bucket_maintenance_configuration-instance_method
      def put_table_bucket_maintenance_configuration: (
                                                        table_bucket_arn: ::String,
                                                        type: ("icebergUnreferencedFileRemoval"),
                                                        value: {
                                                          status: ("enabled" | "disabled")?,
                                                          settings: {
                                                            iceberg_unreferenced_file_removal: {
                                                              unreferenced_days: ::Integer?,
                                                              non_current_days: ::Integer?
                                                            }?
                                                          }?
                                                        }
                                                      ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                                    | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#put_table_bucket_policy-instance_method
      def put_table_bucket_policy: (
                                     table_bucket_arn: ::String,
                                     resource_policy: ::String
                                   ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                 | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#put_table_maintenance_configuration-instance_method
      def put_table_maintenance_configuration: (
                                                 table_bucket_arn: ::String,
                                                 namespace: ::String,
                                                 name: ::String,
                                                 type: ("icebergCompaction" | "icebergSnapshotManagement"),
                                                 value: {
                                                   status: ("enabled" | "disabled")?,
                                                   settings: {
                                                     iceberg_compaction: {
                                                       target_file_size_mb: ::Integer?
                                                     }?,
                                                     iceberg_snapshot_management: {
                                                       min_snapshots_to_keep: ::Integer?,
                                                       max_snapshot_age_hours: ::Integer?
                                                     }?
                                                   }?
                                                 }
                                               ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#put_table_policy-instance_method
      def put_table_policy: (
                              table_bucket_arn: ::String,
                              namespace: ::String,
                              name: ::String,
                              resource_policy: ::String
                            ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#rename_table-instance_method
      def rename_table: (
                          table_bucket_arn: ::String,
                          namespace: ::String,
                          name: ::String,
                          ?new_namespace_name: ::String,
                          ?new_name: ::String,
                          ?version_token: ::String
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _UpdateTableMetadataLocationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateTableMetadataLocationResponse]
        def name: () -> ::String
        def table_arn: () -> ::String
        def namespace: () -> ::Array[::String]
        def version_token: () -> ::String
        def metadata_location: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/S3Tables/Client.html#update_table_metadata_location-instance_method
      def update_table_metadata_location: (
                                            table_bucket_arn: ::String,
                                            namespace: ::String,
                                            name: ::String,
                                            version_token: ::String,
                                            metadata_location: ::String
                                          ) -> _UpdateTableMetadataLocationResponseSuccess
                                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateTableMetadataLocationResponseSuccess
    end
  end
end

